import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.PriorityQueue;

public class App {

    public static void printCode(HuffmanNode root, String s){
        // base case; if the left and right are null 
        // then its a leaf node and we print 
        // the code s generated by traversing the tree. 

        if (root.left == null && root.right == null
            && Character.isLetter(root.ch)) { 
  
            // ch is the character in the node 
            System.out.println(root.ch + ":" + s); 
  
            return; 
        } 
  
        // if we go to left then add "0" to the code. 
        // if we go to the right add"1" to the code. 
  
        // recursive calls for left and 
        // right sub-tree of the generated tree. 
        printCode(root.left, s + "0"); 
        printCode(root.right, s + "1"); 
    }
    public static void main(String[] args) throws Exception {

        //Reading file to get lists of characters and their frequencies plus number of letters 
        FileUtils myFileUtils = new FileUtils();
        ArrayList<Character> inputCharList = myFileUtils.getInputCharList();
        ArrayList<Integer> inputFreqList = myFileUtils.getInputFreqList();
        int numOfLetters = myFileUtils.getNumOfLetters();
        ArrayList<Character> textList = myFileUtils.getTextList();

        //Send the above for encoding

        HuffmanCoding hc = new HuffmanCoding(inputCharList, inputFreqList, numOfLetters);

        HashMap<Character,String> codeMap = hc.codeMap;

        //Send map of codes and characters along with the original text to convert into a string of binary digits
        EncodeTextFile ef = new EncodeTextFile(codeMap, textList, "");

        System.out.println("Encoded text: "+ef.encodedText);
        

        //send the encoded text (binary digits) along with Huffman root node for decoding

        HuffmanDecoding hd = new HuffmanDecoding(ef.encodedText, hc.root);

        String finalDecodedString = hd.text;

        System.out.println("Final decoded text: "+finalDecodedString);

        //Write the String into a file
        // Creates a FileWriter
        FileWriter encodedfile = new FileWriter("output.txt");

        // Creates a PrintWriter
        PrintWriter output = new PrintWriter(encodedfile);

        try {
            output.println(finalDecodedString);
        }
        catch(Exception e) {
            e.getStackTrace();
          }

        output.close();

        


    }
}
